/**
*  Copyright (c) ${productName} 2013-${year} ${productUrl}
*
*/
package $controllerPackage;

import com.eryansky.common.utils.StringUtils;
import com.eryansky.common.web.utils.WebUtils;
import com.eryansky.common.web.springmvc.SimpleController;
import com.eryansky.common.model.Result;
import com.eryansky.common.utils.mapper.JsonMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.ui.Model;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import com.eryansky.common.orm.Page;
import com.eryansky.core.security.annotation.RequiresPermissions;
import com.eryansky.utils.AppConstants;
import ${entityPackage}.${entityName};
import ${servicePackage}.${entityName}Service;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
#set( $J = '$' )
/**
 * $tableComment
 * @author ${author}
 * @date ${date}
 */
@Controller
@RequestMapping(value = "${J}{adminPath}/${modulePath}/${entityInstance}")
public class ${entityName}Controller extends SimpleController {

    @Autowired
    private ${entityName}Service ${entityInstance}Service;


    @ModelAttribute("model")
    public ${entityName} get(@RequestParam(required=false) Long id) {
        if (null != id){
            return ${entityInstance}Service.get(id);
        }else{
            return new ${entityName}();
        }
    }

    @RequiresPermissions("${modulePermission}:${entityInstance}:view")
    @RequestMapping(value = {"","list"})
    public String list(${entityName} model,
                Model uiModel,
                HttpServletRequest request,
                HttpServletResponse response) {
        Page<${entityName}> page = new Page<${entityName}>(request,response);
        if(WebUtils.isAjaxRequest(request)){
            page = ${entityInstance}Service.findPage(page,model);
            return renderString(response, JsonMapper.toJsonString(Result.successResult().setObj(page)), WebUtils.JSON_TYPE);
        }

        uiModel.addAttribute("page",page);
        return "modules/${modulePath}/${entityInstance}List";
    }


    @RequiresPermissions("${modulePermission}:${entityInstance}:view")
    @RequestMapping(value = "form")
    public String form(@ModelAttribute("model")${entityName} model, Model uiModel) {
        uiModel.addAttribute("model", model);
        return "modules/${modulePath}/${entityInstance}Form";
    }

    @RequiresPermissions("${modulePermission}:${entityInstance}:edit")
    @RequestMapping(value = "save")
    public String save(@ModelAttribute("model")${entityName} model, Model uiModel, RedirectAttributes redirectAttributes) {
        if (!beanValidator(uiModel, model)){
            return form(model, uiModel);
        }
        ${entityInstance}Service.save(model);
        addMessage(redirectAttributes, "操作成功");
        return "redirect:" + AppConstants.getAdminPath() + "/${modulePath}/${entityInstance}";
    }

    @RequiresPermissions("${modulePermission}:${entityInstance}:edit")
    @RequestMapping(value = "delete")
    public String delete(@ModelAttribute("model")${entityName} model,@RequestParam(required=false) Boolean isRe, RedirectAttributes redirectAttributes) {
        ${entityInstance}Service.delete(model,isRe);
        addMessage(redirectAttributes, "操作成功");
        return "redirect:" + AppConstants.getAdminPath() + "/${modulePath}/${entityInstance}";
    }

}

